# source: https://api-useast.graphcms.com/v1/cjiacyow100ob01eqwnghonw2/master
# timestamp: Sun Jul 22 2018 19:27:13 GMT+0900 (JST)

type AggregateAsset {
  count: Int!
}

type AggregateAuthor {
  count: Int!
}

type AggregateColor {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type Asset implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Status!
  handle: String!
  fileName: String!
  height: Float
  mimeType: String
  size: Float
  width: Float
  coverImagePost(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  avatarAuthor(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author!]

  """Get the url for the asset with provided transformations applied."""
  url(transformation: AssetTransformationInput): String!
}

"""A connection to a list of items."""
type AssetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AssetEdge]!
  aggregate: AggregateAsset!
}

input AssetCreateInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  mimeType: String
  size: Float
  width: Float
  coverImagePost: PostCreateManyWithoutCoverImageInput
  avatarAuthor: AuthorCreateManyWithoutAvatarInput
}

input AssetCreateOneWithoutAvatarAuthorInput {
  create: AssetCreateWithoutAvatarAuthorInput
  connect: AssetWhereUniqueInput
}

input AssetCreateOneWithoutCoverImagePostInput {
  create: AssetCreateWithoutCoverImagePostInput
  connect: AssetWhereUniqueInput
}

input AssetCreateWithoutAvatarAuthorInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  mimeType: String
  size: Float
  width: Float
  coverImagePost: PostCreateManyWithoutCoverImageInput
}

input AssetCreateWithoutCoverImagePostInput {
  status: Status
  handle: String!
  fileName: String!
  height: Float
  mimeType: String
  size: Float
  width: Float
  avatarAuthor: AuthorCreateManyWithoutAvatarInput
}

"""An edge in a connection."""
type AssetEdge {
  """The item at the end of the edge."""
  node: Asset!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AssetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  handle_ASC
  handle_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  mimeType_ASC
  mimeType_DESC
  size_ASC
  size_DESC
  width_ASC
  width_DESC
}

type AssetPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Status!
  handle: String!
  fileName: String!
  height: Float
  mimeType: String
  size: Float
  width: Float
}

type AssetSubscriptionPayload {
  mutation: MutationType!
  node: Asset
  updatedFields: [String!]
  previousValues: AssetPreviousValues
}

input AssetSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AssetWhereInput
}

"""Transformations for Assets"""
input AssetTransformationInput {
  image: ImageTransformationInput
  document: DocumentTransformationInput

  """
  Pass `true` if you want to validate the passed transformation parameters
  """
  validateOptions: Boolean = false
}

input AssetUpdateInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  mimeType: String
  size: Float
  width: Float
  coverImagePost: PostUpdateManyWithoutCoverImageInput
  avatarAuthor: AuthorUpdateManyWithoutAvatarInput
}

input AssetUpdateOneWithoutAvatarAuthorInput {
  create: AssetCreateWithoutAvatarAuthorInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutAvatarAuthorDataInput
  upsert: AssetUpsertWithoutAvatarAuthorInput
}

input AssetUpdateOneWithoutCoverImagePostInput {
  create: AssetCreateWithoutCoverImagePostInput
  connect: AssetWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AssetUpdateWithoutCoverImagePostDataInput
  upsert: AssetUpsertWithoutCoverImagePostInput
}

input AssetUpdateWithoutAvatarAuthorDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  mimeType: String
  size: Float
  width: Float
  coverImagePost: PostUpdateManyWithoutCoverImageInput
}

input AssetUpdateWithoutCoverImagePostDataInput {
  status: Status
  handle: String
  fileName: String
  height: Float
  mimeType: String
  size: Float
  width: Float
  avatarAuthor: AuthorUpdateManyWithoutAvatarInput
}

input AssetUpsertWithoutAvatarAuthorInput {
  update: AssetUpdateWithoutAvatarAuthorDataInput!
  create: AssetCreateWithoutAvatarAuthorInput!
}

input AssetUpsertWithoutCoverImagePostInput {
  update: AssetUpdateWithoutCoverImagePostDataInput!
  create: AssetCreateWithoutCoverImagePostInput!
}

input AssetWhereInput {
  """Logical AND on all given filters."""
  AND: [AssetWhereInput!]

  """Logical OR on all given filters."""
  OR: [AssetWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AssetWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  handle: String

  """All values that are not equal to given value."""
  handle_not: String

  """All values that are contained in given list."""
  handle_in: [String!]

  """All values that are not contained in given list."""
  handle_not_in: [String!]

  """All values less than the given value."""
  handle_lt: String

  """All values less than or equal the given value."""
  handle_lte: String

  """All values greater than the given value."""
  handle_gt: String

  """All values greater than or equal the given value."""
  handle_gte: String

  """All values containing the given string."""
  handle_contains: String

  """All values not containing the given string."""
  handle_not_contains: String

  """All values starting with the given string."""
  handle_starts_with: String

  """All values not starting with the given string."""
  handle_not_starts_with: String

  """All values ending with the given string."""
  handle_ends_with: String

  """All values not ending with the given string."""
  handle_not_ends_with: String
  fileName: String

  """All values that are not equal to given value."""
  fileName_not: String

  """All values that are contained in given list."""
  fileName_in: [String!]

  """All values that are not contained in given list."""
  fileName_not_in: [String!]

  """All values less than the given value."""
  fileName_lt: String

  """All values less than or equal the given value."""
  fileName_lte: String

  """All values greater than the given value."""
  fileName_gt: String

  """All values greater than or equal the given value."""
  fileName_gte: String

  """All values containing the given string."""
  fileName_contains: String

  """All values not containing the given string."""
  fileName_not_contains: String

  """All values starting with the given string."""
  fileName_starts_with: String

  """All values not starting with the given string."""
  fileName_not_starts_with: String

  """All values ending with the given string."""
  fileName_ends_with: String

  """All values not ending with the given string."""
  fileName_not_ends_with: String
  height: Float

  """All values that are not equal to given value."""
  height_not: Float

  """All values that are contained in given list."""
  height_in: [Float!]

  """All values that are not contained in given list."""
  height_not_in: [Float!]

  """All values less than the given value."""
  height_lt: Float

  """All values less than or equal the given value."""
  height_lte: Float

  """All values greater than the given value."""
  height_gt: Float

  """All values greater than or equal the given value."""
  height_gte: Float
  mimeType: String

  """All values that are not equal to given value."""
  mimeType_not: String

  """All values that are contained in given list."""
  mimeType_in: [String!]

  """All values that are not contained in given list."""
  mimeType_not_in: [String!]

  """All values less than the given value."""
  mimeType_lt: String

  """All values less than or equal the given value."""
  mimeType_lte: String

  """All values greater than the given value."""
  mimeType_gt: String

  """All values greater than or equal the given value."""
  mimeType_gte: String

  """All values containing the given string."""
  mimeType_contains: String

  """All values not containing the given string."""
  mimeType_not_contains: String

  """All values starting with the given string."""
  mimeType_starts_with: String

  """All values not starting with the given string."""
  mimeType_not_starts_with: String

  """All values ending with the given string."""
  mimeType_ends_with: String

  """All values not ending with the given string."""
  mimeType_not_ends_with: String
  size: Float

  """All values that are not equal to given value."""
  size_not: Float

  """All values that are contained in given list."""
  size_in: [Float!]

  """All values that are not contained in given list."""
  size_not_in: [Float!]

  """All values less than the given value."""
  size_lt: Float

  """All values less than or equal the given value."""
  size_lte: Float

  """All values greater than the given value."""
  size_gt: Float

  """All values greater than or equal the given value."""
  size_gte: Float
  width: Float

  """All values that are not equal to given value."""
  width_not: Float

  """All values that are contained in given list."""
  width_in: [Float!]

  """All values that are not contained in given list."""
  width_not_in: [Float!]

  """All values less than the given value."""
  width_lt: Float

  """All values less than or equal the given value."""
  width_lte: Float

  """All values greater than the given value."""
  width_gt: Float

  """All values greater than or equal the given value."""
  width_gte: Float
  coverImagePost_every: PostWhereInput
  coverImagePost_some: PostWhereInput
  coverImagePost_none: PostWhereInput
  avatarAuthor_every: AuthorWhereInput
  avatarAuthor_some: AuthorWhereInput
  avatarAuthor_none: AuthorWhereInput
}

input AssetWhereUniqueInput {
  id: ID
  handle: String
}

type Author implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Status!
  name: String
  avatar(where: AssetWhereInput): Asset
  bibliography: String
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

"""A connection to a list of items."""
type AuthorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  status: Status
  name: String
  bibliography: String
  avatar: AssetCreateOneWithoutAvatarAuthorInput
  posts: PostCreateManyWithoutAuthorsInput
}

input AuthorCreateManyWithoutAvatarInput {
  create: [AuthorCreateWithoutAvatarInput!]
  connect: [AuthorWhereUniqueInput!]
}

input AuthorCreateManyWithoutPostsInput {
  create: [AuthorCreateWithoutPostsInput!]
  connect: [AuthorWhereUniqueInput!]
}

input AuthorCreateWithoutAvatarInput {
  status: Status
  name: String
  bibliography: String
  posts: PostCreateManyWithoutAuthorsInput
}

input AuthorCreateWithoutPostsInput {
  status: Status
  name: String
  bibliography: String
  avatar: AssetCreateOneWithoutAvatarAuthorInput
}

"""An edge in a connection."""
type AuthorEdge {
  """The item at the end of the edge."""
  node: Author!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  name_ASC
  name_DESC
  bibliography_ASC
  bibliography_DESC
}

type AuthorPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Status!
  name: String
  bibliography: String
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
}

input AuthorUpdateInput {
  status: Status
  name: String
  bibliography: String
  avatar: AssetUpdateOneWithoutAvatarAuthorInput
  posts: PostUpdateManyWithoutAuthorsInput
}

input AuthorUpdateManyWithoutAvatarInput {
  create: [AuthorCreateWithoutAvatarInput!]
  connect: [AuthorWhereUniqueInput!]
  disconnect: [AuthorWhereUniqueInput!]
  delete: [AuthorWhereUniqueInput!]
  update: [AuthorUpdateWithWhereUniqueWithoutAvatarInput!]
  upsert: [AuthorUpsertWithWhereUniqueWithoutAvatarInput!]
}

input AuthorUpdateManyWithoutPostsInput {
  create: [AuthorCreateWithoutPostsInput!]
  connect: [AuthorWhereUniqueInput!]
  disconnect: [AuthorWhereUniqueInput!]
  delete: [AuthorWhereUniqueInput!]
  update: [AuthorUpdateWithWhereUniqueWithoutPostsInput!]
  upsert: [AuthorUpsertWithWhereUniqueWithoutPostsInput!]
}

input AuthorUpdateWithoutAvatarDataInput {
  status: Status
  name: String
  bibliography: String
  posts: PostUpdateManyWithoutAuthorsInput
}

input AuthorUpdateWithoutPostsDataInput {
  status: Status
  name: String
  bibliography: String
  avatar: AssetUpdateOneWithoutAvatarAuthorInput
}

input AuthorUpdateWithWhereUniqueWithoutAvatarInput {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateWithoutAvatarDataInput!
}

input AuthorUpdateWithWhereUniqueWithoutPostsInput {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateWithoutPostsDataInput!
}

input AuthorUpsertWithWhereUniqueWithoutAvatarInput {
  where: AuthorWhereUniqueInput!
  update: AuthorUpdateWithoutAvatarDataInput!
  create: AuthorCreateWithoutAvatarInput!
}

input AuthorUpsertWithWhereUniqueWithoutPostsInput {
  where: AuthorWhereUniqueInput!
  update: AuthorUpdateWithoutPostsDataInput!
  create: AuthorCreateWithoutPostsInput!
}

input AuthorWhereInput {
  """Logical AND on all given filters."""
  AND: [AuthorWhereInput!]

  """Logical OR on all given filters."""
  OR: [AuthorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AuthorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  bibliography: String

  """All values that are not equal to given value."""
  bibliography_not: String

  """All values that are contained in given list."""
  bibliography_in: [String!]

  """All values that are not contained in given list."""
  bibliography_not_in: [String!]

  """All values less than the given value."""
  bibliography_lt: String

  """All values less than or equal the given value."""
  bibliography_lte: String

  """All values greater than the given value."""
  bibliography_gt: String

  """All values greater than or equal the given value."""
  bibliography_gte: String

  """All values containing the given string."""
  bibliography_contains: String

  """All values not containing the given string."""
  bibliography_not_contains: String

  """All values starting with the given string."""
  bibliography_starts_with: String

  """All values not starting with the given string."""
  bibliography_not_starts_with: String

  """All values ending with the given string."""
  bibliography_ends_with: String

  """All values not ending with the given string."""
  bibliography_not_ends_with: String
  avatar: AssetWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input AuthorWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Color implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ColorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ColorEdge]!
  aggregate: AggregateColor!
}

"""An edge in a connection."""
type ColorEdge {
  """The item at the end of the edge."""
  node: Color!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ColorOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ColorPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ColorSubscriptionPayload {
  mutation: MutationType!
  node: Color
  updatedFields: [String!]
  previousValues: ColorPreviousValues
}

input ColorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ColorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ColorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ColorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ColorWhereInput
}

input ColorWhereInput {
  """Logical AND on all given filters."""
  AND: [ColorWhereInput!]

  """Logical OR on all given filters."""
  OR: [ColorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ColorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input ColorWhereUniqueInput {
  id: ID
}

scalar DateTime

enum DocumentFileTypes {
  jpg
  odp
  ods
  odt
  png
  svg
  txt
  webp
  docx
  html
  pdf
  doc
  xlsx
  xls
  pptx
  ppt
}

input DocumentOutputInput {
  """
  Transforms a document into a desired file type.
  See this matrix for format support:
  
  PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
  DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
  DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
  ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
  XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
  XLSX:	jpg, pdf, ods, png, svg, xls, and webp
  ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
  PPT:	jpg, odp, pdf, png, svg, pptx, and webp
  PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
  ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
  BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
  WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
  TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
  AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
  PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
  SVG:	jpg, odp, ods, odt, pdf, png, and webp
  HTML:	jpg, odt, pdf, svg, txt, and webp
  TXT:	jpg, html, odt, pdf, svg, and webp
  """
  format: DocumentFileTypes
}

"""Transformations for Documents"""
input DocumentTransformationInput {
  """Changes the output for the file."""
  output: DocumentOutputInput
}

enum ImageFit {
  """
  Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
  """
  clip

  """
  Resizes the image to fit the specified parameters exactly by removing any
  parts of the image that don't fit within the boundaries.
  """
  crop

  """
  Resizes the image to fit the specified parameters exactly by scaling the image
  to the desired size. The aspect ratio of the image is not respected and the
  image can be distorted using this method.
  """
  scale

  """
  Resizes the image to fit within the parameters, but as opposed to 'fit:clip'
  will not scale the image if the image is smaller than the output size.
  """
  max
}

input ImageResizeInput {
  """
  The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  width: Int

  """
  The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
  """
  height: Int

  """The default value for the fit parameter is fit:clip."""
  fit: ImageFit
}

"""Transformations for Images"""
input ImageTransformationInput {
  """Resizes the image"""
  resize: ImageResizeInput
}

type Location implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LocationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input LocationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAsset(data: AssetCreateInput!): Asset!
  createColor: Color!
  createLocation: Location!
  createPost(data: PostCreateInput!): Post!
  createAuthor(data: AuthorCreateInput!): Author!
  updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteColor(where: ColorWhereUniqueInput!): Color
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deletePost(where: PostWhereUniqueInput!): Post
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  upsertAsset(where: AssetWhereUniqueInput!, create: AssetCreateInput!, update: AssetUpdateInput!): Asset!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  updateManyAssets(data: AssetUpdateInput!, where: AssetWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManyAuthors(data: AuthorUpdateInput!, where: AuthorWhereInput): BatchPayload!
  deleteManyAssets(where: AssetWhereInput): BatchPayload!
  deleteManyColors(where: ColorWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Status!
  title: String
  slug: String
  tags: [String!]
  content: String
  coverImage(where: AssetWhereInput): Asset
  dateAndTime: DateTime
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author!]
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  status: Status
  title: String
  slug: String
  content: String
  dateAndTime: DateTime
  tags: PostCreatetagsInput
  coverImage: AssetCreateOneWithoutCoverImagePostInput
  authors: AuthorCreateManyWithoutPostsInput
}

input PostCreateManyWithoutAuthorsInput {
  create: [PostCreateWithoutAuthorsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutCoverImageInput {
  create: [PostCreateWithoutCoverImageInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreatetagsInput {
  set: [String!]
}

input PostCreateWithoutAuthorsInput {
  status: Status
  title: String
  slug: String
  content: String
  dateAndTime: DateTime
  tags: PostCreatetagsInput
  coverImage: AssetCreateOneWithoutCoverImagePostInput
}

input PostCreateWithoutCoverImageInput {
  status: Status
  title: String
  slug: String
  content: String
  dateAndTime: DateTime
  tags: PostCreatetagsInput
  authors: AuthorCreateManyWithoutPostsInput
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  content_ASC
  content_DESC
  dateAndTime_ASC
  dateAndTime_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Status!
  title: String
  slug: String
  tags: [String!]
  content: String
  dateAndTime: DateTime
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  status: Status
  title: String
  slug: String
  content: String
  dateAndTime: DateTime
  tags: PostUpdatetagsInput
  coverImage: AssetUpdateOneWithoutCoverImagePostInput
  authors: AuthorUpdateManyWithoutPostsInput
}

input PostUpdateManyWithoutAuthorsInput {
  create: [PostCreateWithoutAuthorsInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorsInput!]
}

input PostUpdateManyWithoutCoverImageInput {
  create: [PostCreateWithoutCoverImageInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCoverImageInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCoverImageInput!]
}

input PostUpdatetagsInput {
  set: [String!]
}

input PostUpdateWithoutAuthorsDataInput {
  status: Status
  title: String
  slug: String
  content: String
  dateAndTime: DateTime
  tags: PostUpdatetagsInput
  coverImage: AssetUpdateOneWithoutCoverImagePostInput
}

input PostUpdateWithoutCoverImageDataInput {
  status: Status
  title: String
  slug: String
  content: String
  dateAndTime: DateTime
  tags: PostUpdatetagsInput
  authors: AuthorUpdateManyWithoutPostsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorsDataInput!
}

input PostUpdateWithWhereUniqueWithoutCoverImageInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCoverImageDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorsDataInput!
  create: PostCreateWithoutAuthorsInput!
}

input PostUpsertWithWhereUniqueWithoutCoverImageInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCoverImageDataInput!
  create: PostCreateWithoutCoverImageInput!
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  slug: String

  """All values that are not equal to given value."""
  slug_not: String

  """All values that are contained in given list."""
  slug_in: [String!]

  """All values that are not contained in given list."""
  slug_not_in: [String!]

  """All values less than the given value."""
  slug_lt: String

  """All values less than or equal the given value."""
  slug_lte: String

  """All values greater than the given value."""
  slug_gt: String

  """All values greater than or equal the given value."""
  slug_gte: String

  """All values containing the given string."""
  slug_contains: String

  """All values not containing the given string."""
  slug_not_contains: String

  """All values starting with the given string."""
  slug_starts_with: String

  """All values not starting with the given string."""
  slug_not_starts_with: String

  """All values ending with the given string."""
  slug_ends_with: String

  """All values not ending with the given string."""
  slug_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  dateAndTime: DateTime

  """All values that are not equal to given value."""
  dateAndTime_not: DateTime

  """All values that are contained in given list."""
  dateAndTime_in: [DateTime!]

  """All values that are not contained in given list."""
  dateAndTime_not_in: [DateTime!]

  """All values less than the given value."""
  dateAndTime_lt: DateTime

  """All values less than or equal the given value."""
  dateAndTime_lte: DateTime

  """All values greater than the given value."""
  dateAndTime_gt: DateTime

  """All values greater than or equal the given value."""
  dateAndTime_gte: DateTime
  coverImage: AssetWhereInput
  authors_every: AuthorWhereInput
  authors_some: AuthorWhereInput
  authors_none: AuthorWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  assets(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Asset]!
  colors(where: ColorWhereInput, orderBy: ColorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Color]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  asset(where: AssetWhereUniqueInput!): Asset
  color(where: ColorWhereUniqueInput!): Color
  location(where: LocationWhereUniqueInput!): Location
  post(where: PostWhereUniqueInput!): Post
  author(where: AuthorWhereUniqueInput!): Author
  assetsConnection(where: AssetWhereInput, orderBy: AssetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AssetConnection!
  colorsConnection(where: ColorWhereInput, orderBy: ColorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ColorConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type Subscription {
  asset(where: AssetSubscriptionWhereInput): AssetSubscriptionPayload
  color(where: ColorSubscriptionWhereInput): ColorSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
}
